{"version":3,"sources":["App.js","index.js"],"names":["emojiDictionary","emojiWeKnow","Object","keys","App","useState","meaning","setMeaning","className","onChange","event","userInput","target","value","undefined","map","emoji","onClick","emojiClickHandler","style","fontSize","padding","rootElement","document","getElementById","ReactDOM","render"],"mappings":"4LAGIA,EAAkB,CACpB,eAAM,wBACN,eAAM,iBACN,eAAM,gBACN,eAAM,gBACN,eAAM,WACN,eAAM,aACN,eAAM,6BACN,qBAAO,wBACP,eAAM,iBACN,eAAM,uBACN,eAAM,cACN,eAAM,aACN,eAAM,OACN,eAAM,SACN,eAAM,SAEJC,EAAcC,OAAOC,KAAKH,GAUf,SAASI,IACtB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KA8BA,OACE,sBAAKC,UAAU,MAAf,UACE,oDAEA,uBAAOC,SAhCX,SAA2BC,GACzB,IAAIC,EAAYD,EAAME,OAAOC,MAEzBP,EAAUN,EAAgBW,QAEdG,IAAZR,IACFA,EAAU,qCAGZC,EAAWD,MAwBT,mCAAMA,EAAN,OACA,kDACCL,EAAYc,KAAI,SAAUC,GACzB,OACE,uBACEC,QAAS,kBA3BnB,SAA2BD,GAEzBT,EADcP,EAAgBgB,IA0BPE,CAAkBF,IACjCG,MAAO,CAAEC,SAAU,SAAUC,QAAS,UAFxC,UAKGL,EAAO,MAFHA,SCpEjB,IAAMM,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACtB,EAAD,MAEFkB,I","file":"static/js/main.fe61a8de.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nvar emojiDictionary = {\n  \"ü§í\": \"Face with Thermometer\",\n  \"ü§¢\": \"Nauseated Face\",\n  \"ü§Æ\": \"Face Vomiting\",\n  \"ü§ß\": \"Sneezing Face\",\n  \"ü•µ\": \"Hot Face\",\n  \"ü•¥\": \"Woozy Face\",\n  \"üòµ\": \"Face with Crossed-Out Eyes\",\n  \"üòµ‚Äç\": \"Face with Spiral Eyes\",\n  \"ü§Ø\": \"Exploding Head\",\n  \"‚ò†Ô∏è\": \"Skull and Crossbones\",\n  \"üí©\": \"Pile of Poo\",\n  \"ü§°\": \"Clown Face\",\n  \"üëπ\": \"Ogre\",\n  \"üë∫\": \"Goblin\",\n  \"üëª\": \"Ghost\"\n};\nvar emojiWeKnow = Object.keys(emojiDictionary);\n\n// var headingText = \"inside out\";\n// var color = \"blue\";\n\n// var username = prompt(\"Give me your name\");\n\n// var username = \"Aditya\";\n\n// var likeCounter = 0;\nexport default function App() {\n  const [meaning, setMeaning] = useState(\"\");\n\n  function emojiInputHandler(event) {\n    var userInput = event.target.value;\n\n    var meaning = emojiDictionary[userInput];\n    // console.log(meaning)\n    if (meaning === undefined) {\n      meaning = \"we dont have this in our database\";\n    }\n\n    setMeaning(meaning);\n  }\n  function emojiClickHandler(emoji) {\n    var meaning = emojiDictionary[emoji];\n    setMeaning(meaning);\n  }\n  //  const [userInput,setUserInput] = useState(\"\")\n\n  //   function inputChangeHandler(event) {\n  //     console.log(event.target.value);\n  //     setUserInput(event.target.value);\n\n  // const [likeCounter, setLikeCounter] = useState(0);\n  // function likeClickHandler() {\n  // var newLikeCountervalue = likeCounter + 1;\n  // likeCounter = likeCounter + 1; //processing\n  // console.log(\"clicked!\", likeCounter); //output\n  // setLikeCounter(likeCounter + 1);\n\n  return (\n    <div className=\"App\">\n      <h1>Emoji interpreter!</h1>\n\n      <input onChange={emojiInputHandler} />\n      <h2> {meaning} </h2>\n      <h3> emojis we know </h3>\n      {emojiWeKnow.map(function (emoji) {\n        return (\n          <span\n            onClick={() => emojiClickHandler(emoji)}\n            style={{ fontSize: \"1.8rem\", padding: \"0.3rem\" }}\n            key={emoji}\n          >\n            {emoji}{\" \"}\n          </span>\n        );\n      })}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}